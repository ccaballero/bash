#!/usr/bin/env node

const path=require('path')
  , join=path.join
  , parse=path.parse
  , fs=require('fs')
  , mediadir='/media/music/'
  , playlist=process.argv[2]                    // path for mpd playlist
  , destdir=process.argv[3]||'/mnt/sdc1/music'  // path for push music
  , copy=(orig,dest)=>{
        return new Promise((resolve,reject)=>{
            let rd=fs.createReadStream(orig)
              , wr=fs.createWriteStream(dest)

            rd.on('error',(err)=>{
                console.log(err);
                reject(err);
            });

            wr.on('error',(err)=>{
                console.log(err);
                reject(err);
            });

            wr.on('close',(ex)=>{
                console.log(orig,'->',dest);
            });

            rd.pipe(wr);
            resolve();
        });
    }
  , playlist_=parse(playlist)

fs.readFile(playlist,'utf8',(err,data)=>{
    let songs=data.split(/\n/)
      , list=[]
      , dest_dir=join(destdir,playlist_.name)
      , files=[]

    fs.access(dest_dir,fs.constants.R_OK,(err)=>{
        if(err){
            fs.mkdirSync(dest_dir);
        }

        for(let song of songs){
            if(song!=''){
                let orig=join(mediadir,song)
                  , orig_=parse(orig)
                  , dest=join(dest_dir,orig_.base)
                dest=dest.replace(':','-');

                files.push(playlist_.name+'/'+orig_.base);
                list.push(copy(orig,dest));
            }
        }

        Promise.all(list).then((values)=>{
            fs.writeFile(join(destdir,playlist_.base),
                files.join('\n'),(error)=>{
                console.log('[OK]');
            });
        });
    });
});

